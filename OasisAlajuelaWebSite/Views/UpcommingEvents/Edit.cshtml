@model ET.UpcommingEvents

@{
    ViewBag.Title = "Editar Evento";
    Layout = "~/Views/Shared/_PupopLayout.cshtml";
}

<script src="~/Scripts/jquery-3.5.0.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        var flag = '@(Model.ActionType)';
        if (flag == "UPDATE")
        {
            opener.location.reload();
            window.close();
        }
    });

    function Create() {
        var url = '@Url.Action("AddNew", "Ministers")';
        window.open(url, '_blank' , 'left=100,top=100,width=500,height=650,toolbar=1,resizable=0');
    }
    function Reservation() {
        var flag = document.getElementById("ReservationFlag");
        var DIV = document.getElementById("CapacityDiv");
        
        if (flag.value == "true") {
            DIV.style.display = "block";
        }
        else {
            DIV.style.display = "none";
            document.getElementById("Capacity").value = null;
        }

    }
</script>

<div class="card bg-light">
    <article class="card-body">
        <h4 class="card-title mt-3 font-weight-bold">@ViewBag.Title del <span style="color: blue;">@Model.EventDay de @Model.EventMonth</span></h4>
        @using (Html.BeginForm("Edit", "UpcommingEvents", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger m-0" })
                @Html.HiddenFor(model => model.EventID)
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2", @style = "max-width: 100%;" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10 d-flex justify-content-between">
                        @Html.LabelFor(model => model.MinisterID, htmlAttributes: new { @class = "control-label m-0", @style = "float: left;" })
                        <a href="#" onclick="Create();" title="Agregar Predicador"><i class="fas fa-user-plus"></i></a>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.MinisterID, new SelectList(Model.MinisterList, "MinisterID", "FullName"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.MinisterID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col">
                            @Html.LabelFor(model => model.ScheduledDate, htmlAttributes: new { @class = "control-label col-md-2 my-0", @style = "max-width: 100%;" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ScheduledDate, new { htmlAttributes = new { @class = "form-control", @style = "max-width: 200px;" } })
                                @Html.ValidationMessageFor(model => model.ScheduledDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col">
                            @Html.LabelFor(model => model.ScheduledTime, htmlAttributes: new { @class = "control-label col-md-2 my-0", @style = "max-width: 100%;" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ScheduledTime, new { htmlAttributes = new { @class = "form-control", @style = "max-width: 200px;" } })
                                @Html.ValidationMessageFor(model => model.ScheduledTime, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="input-group m-3 w-100">
                        <div class="input-group-prepend">
                            <span class="input-group-text font-weight-bold" id="inputGroup-sizing-default">Requiere reservación?</span>
                        </div>
                        @{
                            List<SelectListItem> ReservationRequire = new List<SelectListItem>();
                            ReservationRequire.Add(new SelectListItem() { Text = "Si", Value = "true" });
                            ReservationRequire.Add(new SelectListItem() { Text = "No", Value = "false" });
                        }
                        @Html.DropDownListFor(model => model.ReservationFlag, ReservationRequire, new { @class = "custom-select", style = "max-width: 70px;", @onchange = "Reservation()" })
                        @Html.ValidationMessageFor(model => model.ReservationFlag, "", new { @class = "text-danger" })
                    </div>
                </div>
                 @{
                    List<SelectListItem> Capacities = new List<SelectListItem>();
                    Capacities.Add(new SelectListItem() { Text = "Total - 100%", Value = "100" });
                    Capacities.Add(new SelectListItem() { Text = "Media - 50%", Value = "50" });
                    Capacities.Add(new SelectListItem() { Text = "Parcial - 25%", Value = "25" });
                }
                @if (Model.Capacity > 0)
                {
                    <div id="CapacityDiv" class="form-group" style="display: block;">
                        <div class="col-md-10 d-flex justify-content-between">
                            @Html.LabelFor(model => model.Capacity, htmlAttributes: new { @class = "control-label m-0" })
                        </div>
                        <div class="col-md-10">
                           
                            @Html.DropDownListFor(model => model.Capacity, Capacities, new { @class = "custom-select" })
                            @Html.ValidationMessageFor(model => model.Capacity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else
                {
                    <div id="CapacityDiv" class="form-group" style="display: none;">
                        <div class="col-md-10 d-flex justify-content-between">
                            @Html.LabelFor(model => model.Capacity, htmlAttributes: new { @class = "control-label m-0" })
                        </div>
                        <div class="col-md-10">
                            @Html.DropDownListFor(model => model.Capacity, Capacities, new { @class = "custom-select" })
                            @Html.ValidationMessageFor(model => model.Capacity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2", @style = "max-width: 100%;" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, 5, 1, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Guardar" class="btn btn-dark alt mt-0 mb-2" />
                        <input type="button" value="Cancelar" class="btn btn-dark alt mt-0 mb-2" onclick="javascript: window.close();" />
                    </div>
                </div>
            </div>
        }
    </article>
</div>