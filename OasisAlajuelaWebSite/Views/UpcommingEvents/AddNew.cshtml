@model ET.UpcommingEvents

@{
    ViewBag.Title = "Agregar Nuevo Evento";
    Layout = "~/Views/Shared/_PupopLayout.cshtml";
}

<script src="~/Scripts/jquery-3.5.0.min.js"></script>

<script type="text/javascript">
    $(document).ready(function () {
        var flag = '@(Model.ActionType)';
        if (flag == "CREATE")
        {
            opener.location.reload();
            window.close();
        }
    });

    function Create() {
        var url = '@Url.Action("AddNew", "Ministers")';
        window.open(url, '_blank' , 'left=100,top=100,width=500,height=650,toolbar=1,resizable=0');
    }
    function Reservation() {
        var flag = document.getElementById("ReservationFlag");
        var CDIV = document.getElementById("CapacityDiv");
        var DDIV = document.getElementById("DistanceDiv");
        
        if (flag.value == "true") {
            CDIV.style.display = "block";
            DDIV.style.display = "block";
        }
        else {
            CDIV.style.display = "none";
            DDIV.style.display = "none";
            document.getElementById("CapacityDiv").value = null;
            document.getElementById("DistanceDiv").value = null;
        }
    }
    function ValidateCM() {
        var SD = document.getElementById("SocialDistance");
        var Cap = document.getElementById("Capacity");
        var CM = "554";
        switch (SD.value) {
            case "1":
                CM = "280";
                break;
            case "2":
                CM = "150";
                break;
            case "3":
                CM = "100";
                break;
            default:
                CM = "554";
        }

        if (Cap.value > CM) {
            alert('El cupo máximo seleccionado excede el capacidad máxima estimada.');
            document.getElementById("btnSubmit").disabled = true;
        }
        else {
            document.getElementById("btnSubmit").disabled = false;
        }
    }

    function UpdateCM() {
        var SD = document.getElementById("SocialDistance");
        var CM = document.getElementById("Capacity");
        switch (SD.value) {
            case "1":
                CM.value = "280";
                break;
            case "2":
                CM.value = "150";
                break;
            case "3":
                CM.value = "100";
                break;
            default:
                CM.value = "554";
        };
        document.getElementById("btnSubmit").disabled = false;
    }
</script>

<div class="card bg-light">
    <article class="card-body">
        <h4 class="card-title text-center font-weight-bold">@ViewBag.Title</h4>
        @using (Html.BeginForm("AddNew", "UpcommingEvents", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger m-0" })
                <div class="form-group">
                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2", @style = "max-width: 100%;" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10 d-flex justify-content-between">
                        @Html.LabelFor(model => model.MinisterID, htmlAttributes: new { @class = "control-label m-0", @style = "float: left;"})
                        <a href="#" onclick="Create();" title="Agregar Predicador"><i class="fas fa-user-plus"></i></a>
                    </div>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.MinisterID, new SelectList(Model.MinisterList, "MinisterID", "FullName"), new { @class = "custom-select" } )
                        @Html.ValidationMessageFor(model => model.MinisterID, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col">
                            @Html.LabelFor(model => model.ScheduledDate, htmlAttributes: new { @class = "control-label col-md-2 my-0", @style = "max-width: 100%;" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ScheduledDate, new { htmlAttributes = new { @class = "form-control", @style = "max-width: 200px;" } })
                                @Html.ValidationMessageFor(model => model.ScheduledDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col">
                            @Html.LabelFor(model => model.ScheduledTime, htmlAttributes: new { @class = "control-label col-md-2 my-0", @style = "max-width: 100%;" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.ScheduledTime, new { htmlAttributes = new { @class = "form-control", @style = "max-width: 200px;" } })
                                @Html.ValidationMessageFor(model => model.ScheduledTime, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>                                      
                </div>
                <div class="form-group">
                    <div class="input-group m-3 w-100">
                        <div class="input-group-prepend">
                            <span class="input-group-text font-weight-bold" id="inputGroup-sizing-default">Requiere reservación?</span>
                        </div>
                        @{
                            List<SelectListItem> ReservationRequire = new List<SelectListItem>();
                            ReservationRequire.Add(new SelectListItem() { Text = "Si", Value = "true" });
                            ReservationRequire.Add(new SelectListItem() { Text = "No", Value = "false" });
                        }
                        @Html.DropDownListFor(model => model.ReservationFlag, ReservationRequire, new { @class = "custom-select" , style = "max-width: 70px;", @onchange = "Reservation()" })
                        @Html.ValidationMessageFor(model => model.ReservationFlag, "", new { @class = "text-danger" })
                    </div>               
                </div>
                 <div id="DistanceDiv" class="form-group" style="display: none;">
                    <div class="input-group m-3 w-100">
                        <div class="input-group-prepend">
                            <span class="input-group-text font-weight-bold" id="inputGroup-sizing-default">Distanciamiento</span>
                        </div>
                        @{
                            List<SelectListItem> DistanceOptions = new List<SelectListItem>();
                            DistanceOptions.Add(new SelectListItem() { Text = "No es necesario", Value = "0" });
                            DistanceOptions.Add(new SelectListItem() { Text = "1 Silla - C.M: aprox. 280 espacios", Value = "1" });
                            DistanceOptions.Add(new SelectListItem() { Text = "2 Sillas - C.M: aprox. 150 espacios", Value = "2" });
                            DistanceOptions.Add(new SelectListItem() { Text = "3 Sillas - C.M: aprox. 100 espacios", Value = "3" });
                        }
                        @Html.DropDownListFor(model => model.SocialDistance, DistanceOptions, new { @class = "custom-select" , style = "margin-right: 2rem;", @onchange = "UpdateCM()" })
                        @Html.ValidationMessageFor(model => model.SocialDistance, "", new { @class = "text-danger" })
                    </div>               
                </div>
                <div id="CapacityDiv" class="form-group" style="display: none;">
                    <div class="input-group m-3 w-100">
                        <div class="input-group-prepend">
                            <span class="input-group-text font-weight-bold" id="inputGroup-sizing-default">Cupo máximo</span>
                        </div>
                        @Html.EditorFor(model => model.Capacity, new { htmlAttributes = new { @class = "form-control", @style = "max-width: 163px;", placeholder = "Si aplica", @onchange = "ValidateCM()" } })
                        @Html.ValidationMessageFor(model => model.Capacity, "", new { @class = "text-danger" })
                    </div>
                </div>
               
                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2", @style = "max-width: 100%;" })
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Description, 3, 1, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" id="btnSubmit" value="Guardar" class="btn btn-dark alt mt-0 mb-2"/>
                        <input type="button" value="Cancelar" class="btn btn-dark alt mt-0 mb-2" onclick="javascript: window.close();" />
                    </div>
                </div>
            </div>
        }
    </article>
</div>