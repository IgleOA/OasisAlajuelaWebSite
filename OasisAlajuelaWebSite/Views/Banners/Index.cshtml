@model PagedList.IPagedList<ET.Banner>
@using PagedList.Mvc;

@{
    ViewBag.Title = "Banners";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div id="header" class="headerFixed" style="z-index:-1;position:relative;">

</div>

@if (ViewBag.Write == true)
{
    <script src="~/Scripts/jquery-3.5.0.min.js"></script>
    <script type="text/javascript">
        function Activate(BID) {
            $.ajax({
                url: '@Url.Action("BannersChangeStatus")',
                data: { id: BID }
            }).done(function () { location.reload(); });
        }
        function Desactivate(BID) {
            var x = confirm("Esta seguro que quiere desactivar este banner???");
            if (x) {
                $.ajax({
                    url: '@Url.Action("BannersChangeStatus")',
                    data: { id: BID }
                }).done(function () { alert('Hecho!!!'); location.reload(); });
            }
        }
        function AddNew() {
            var url = '@Url.Action("AddNew")';
            window.open(url, '_blank' , 'left=100,top=100,width=500,height=650,toolbar=1,resizable=0');
        }
    </script>
    
    <section class="hp-section bg-light ftco-animate animated fadeInUp">
        <div class="container">
            <div class="col p-0 text-center heading-section heading-section-light ftco-animate animated fadeInUp">
                <h2 class="mb-0"><span class="px-4">@ViewBag.Title.ToUpper()</span></h2>
                <span class="subheading">Desde esta sección usted puede configurar todo lo refente a los banners.</span>
            </div>
            @using (Html.BeginForm("Index", "Banners", FormMethod.Get))
            {
                <div class="row justify-content-start">
                    <div class="form-group input-group p-0 searchfield w-50">
                        <div class="input-group-prepend">
                            <span class="input-group-text w"><i class="fas fa-search"></i></span>
                        </div>
                        @Html.TextBox("SearchString", null, new { @class = "form-control", @placeholder = "Buscar por leyenda" })
                    </div>
                    <input type="submit" value="Buscar" class="btn btn-dark alt mt-0 mb-2" style="height: 2.75rem !important;" />
                </div>
            }
            <div class="row justify-content-start">
                <table class="table-responsive-md align-content-center p-0">
                    <tbody>
                        <tr class="align-middle">
                            <th class="text-center py-2">@Html.ActionLink("Ubicación", "Index", new { sortOrder = ViewBag.LocationOrder, currentFilter = ViewBag.CurrentFilter })</th>
                            <th class="text-center py-2">@Html.DisplayNameFor(model => model.FirstOrDefault().BannerName)</th>
                            <th class="text-center py-2">Banner</th>
                            <th class="text-center py-2">@Html.ActionLink("Status", "Index", new { sortOrder = ViewBag.StatusOrder, currentFilter = ViewBag.CurrentFilter })</th>
                            <th class="text-center py-2">Acción</th>
                        </tr>

                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="text-center align-middle">@Html.DisplayFor(modelItem => item.LocationBanner)</td>
                                <td class="text-center align-middle">@Html.DisplayFor(modelItem => item.BannerName)</td>
                                @{
                                    var base64 = Convert.ToBase64String(item.BannerData, 0, item.BannerData.Length);
                                    var imgSrc = string.Format("data:image/{0};base64,{1}", item.BannerExt, base64);
                                    var text = imgSrc;
                                }
                                <td class="text-center align-middle"><img src="@imgSrc" class="zoom" title="@item.BannerName" /></td>
                                @{
                                    var isActive = (item.ActiveFlag ? "Activo" : "Inactivo");
                                    var Editflag = "EditFlag" + item.BannerID.ToString();
                                }
                                <td class="text-center align-middle">@Html.DisplayFor(modelItem => isActive)</td>
                                <td class="text-center align-middle">
                                    @if (item.ActiveFlag == false)
                                    {

                                        <script type="text/javascript">
                                            $(document).ready(function () {
                                                $("#@Editflag").hover(function () {
                                                    $(this).removeClass('fas fa-times-circle fa-2x DisactiveColor');
                                                    $(this).addClass('fas fa-check-circle fa-2x ActiveColor');
                                                }, function () {
                                                    $(this).removeClass('fas fa-check-circle fa-2x ActiveColor');
                                                    $(this).addClass('fas fa-times-circle fa-2x DisactiveColor');
                                                });
                                            });
                                        </script>
                                        <a href="#" class="card-link" onclick="Activate(@item.BannerID)" title="Habilitar"><i id="@Editflag" class="fas fa-times-circle fa-2x DisactiveColor" style="vertical-align: middle;"></i></a>
                                    }
                                    else
                                    {
                                        <script type="text/javascript">
                                            $(document).ready(function () {
                                                $("#@Editflag").hover(function () {
                                                    $(this).removeClass('fas fa-check-circle fa-2x ActiveColor');
                                                    $(this).addClass('fas fa-times-circle fa-2x DisactiveColor');
                                                }, function () {
                                                    $(this).removeClass('fas fa-times-circle fa-2x DisactiveColor');
                                                    $(this).addClass('fas fa-check-circle fa-2x ActiveColor');
                                                });
                                            });
                                        </script>
                                        <a href="#" class="card-link" onclick="Desactivate(@item.BannerID)" title="Deshabilitar"><i id="@Editflag" class="fas fa-check-circle fa-2x ActiveColor" style="vertical-align: middle;"></i></a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="row justify-content-start">
                @if (Model.PageCount > 1)
                {
                    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }), new PagedListRenderOptions() { ContainerDivClasses = new string[] { "p-0" }, UlElementClasses = new string[] { "pagination m-0" } })
                }
                <a href="#" onclick="AddNew()" title="Agregar nuevo Banner" class="btn btn-light" style="text-decoration: none; padding: 6px 12px;"><i class="fas fa-plus-square fa-1x"></i> Agregar nuevo Banner</a>
            </div>            
        </div>
    </section>
}
else
{    
    <section class="hp-section bg-light ftco-animate animated fadeInUp">
        <div class="container">
            <div class="col p-0 text-center heading-section heading-section-light ftco-animate animated fadeInUp">
                <h2 class="mb-0"><span class="px-4">@ViewBag.Title.ToUpper()</span></h2>
                <span class="subheading">Desde esta sección usted puede configurar todo lo refente a los banners.</span>
            </div>
            @using (Html.BeginForm("Index", "Banners", FormMethod.Get))
            {
                <div class="row justify-content-start">
                    <div class="form-group input-group p-0 searchfield w-50">
                        <div class="input-group-prepend">
                            <span class="input-group-text w"><i class="fas fa-search"></i></span>
                        </div>
                        @Html.TextBox("SearchString", null, new { @class = "form-control", @placeholder = "Buscar por leyenda" })
                    </div>
                    <input type="submit" value="Buscar" class="btn btn-dark alt mt-0 mb-2" style="height: 2.75rem !important;" />
                </div>
            }
            <div class="row justify-content-start">
                <table class="table-responsive-md align-content-center p-0">
                    <tbody>
                        <tr class="align-middle">
                            <th class="text-center py-2">@Html.ActionLink("Ubicación", "Index", new { sortOrder = ViewBag.LocationOrder, currentFilter = ViewBag.CurrentFilter })</th>
                            <th class="text-center py-2">@Html.DisplayNameFor(model => model.FirstOrDefault().BannerName)</th>
                            <th class="text-center py-2">Banner</th>
                            <th class="text-center py-2">@Html.ActionLink("Status", "Index", new { sortOrder = ViewBag.StatusOrder, currentFilter = ViewBag.CurrentFilter })</th>
                        </tr>

                        @foreach (var item in Model)
                        {
                            <tr>
                                <td class="text-center align-middle">@Html.DisplayFor(modelItem => item.LocationBanner)</td>
                                <td class="text-center align-middle">@Html.DisplayFor(modelItem => item.BannerName)</td>
                                @{
                                    var base64 = Convert.ToBase64String(item.BannerData, 0, item.BannerData.Length);
                                    var imgSrc = string.Format("data:image/{0};base64,{1}", item.BannerExt, base64);
                                    var text = imgSrc;
                                }
                                <td class="text-center align-middle"><img src="@imgSrc" class="zoom" title="@item.BannerName" /></td>
                                @{
                                    var isActive = (item.ActiveFlag ? "Activo" : "Inactivo");
                                }
                                <td class="text-center align-middle">@Html.DisplayFor(modelItem => isActive)</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="row justify-content-start">
                @if (Model.PageCount > 1)
                {
                    @Html.PagedListPager(Model, page => Url.Action("Index", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }), new PagedListRenderOptions() { ContainerDivClasses = new string[] { "p-0" }, UlElementClasses = new string[] { "pagination m-0" } })
                }
            </div>
        </div>
    </section>
}
